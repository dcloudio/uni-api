import { RequestOptions, RequestTask, UploadTask, UploadFileOptions, OnProgressUpdateResult, UploadFileProgressUpdateCallback, OnProgressDownloadResult, DownloadTask, DownloadFileOptions, DownloadFileProgressUpdateCallback } from '../../interface.uts'
import OkHttpClient from 'okhttp3.OkHttpClient';
import Protocol from 'okhttp3.Protocol';
import TimeUnit from 'java.util.concurrent.TimeUnit';
import Collections from 'java.util.Collections';
import { OKDns } from './OKDns.uts';
import Uri from 'android.net.Uri';
import ConnectionPool from 'okhttp3.ConnectionPool';
import Request from 'okhttp3.Request';
import Call from 'okhttp3.Call';
import Response from 'okhttp3.Response';
import Headers from 'okhttp3.Headers';
import Callback from 'okhttp3.Callback';
import ExecutorService from 'java.util.concurrent.ExecutorService';
import Executors from 'java.util.concurrent.Executors';
import RequestBody from 'okhttp3.RequestBody';
import MediaType from 'okhttp3.MediaType';
import Dispatcher from 'okhttp3.Dispatcher';
import IOException from 'java.io.IOException';
import List from 'java.util.List';
import InputStream from 'java.io.InputStream';
import ByteArrayOutputStream from 'java.io.ByteArrayOutputStream';
import BufferedReader from 'java.io.BufferedReader';
import InputStreamReader from 'java.io.InputStreamReader';
import OkHostnameVerifier from 'okhttp3.internal.tls.OkHostnameVerifier';
import { SSLFactoryManager } from './tls/SSLFactoryManager.uts';
import { SSLConfig } from './tls/SSLConfig.uts';
import { CookieInterceptor } from './interceptor/CookieInterceptor.uts'
import MultipartBody from 'okhttp3.MultipartBody';
import JSONObject from 'com.alibaba.fastjson.JSONObject';
import { UploadController } from './upload/UploadController.uts';
import ArrayList from 'java.util.ArrayList';
import { DownloadController } from './download/DownloadController.uts';

class NetworkRequestListener {
	public onStart(): void { }

	public onProgress(progress: number): void { }

	public onComplete(option: UTSJSONObject): void { }

	public onHeadersReceived(statusCode: number, headers: MutableMap<String, MutableList<String>>): void { }
}

interface NetworkUploadFileListener {
	progressListeners: ArrayList<UploadFileProgressUpdateCallback>;
	onProgress(progressUpdate: OnProgressUpdateResult): void;
	onComplete(option: UTSJSONObject): void;
}

interface NetworkDownloadFileListener {
	progressListeners: ArrayList<DownloadFileProgressUpdateCallback>;
	onProgress(progressUpdate: OnProgressDownloadResult): void;
	onComplete(option: UTSJSONObject): void;
}


class NetworkRequestTaskImpl implements RequestTask {
	private call: Call | null = null;
	constructor(call: Call | null) {
		this.call = call;
	}

	public abort() {
		if (this.call != null) {
			this.call?.cancel();
		}
	}
}




class NetworkManager {

	private static instance: NetworkManager | null = null;

	private static connectPool: ConnectionPool | null = null;

	/**
	 * request的线程池
	 */
	private requestExecutorService: ExecutorService | null = null;

	public static getInstance(): NetworkManager {
		if (this.instance == null) {
			this.instance = new NetworkManager();
		}
		return this.instance!;
	}



	public request<T>(param: RequestOptions<T>, listener: NetworkRequestListener): RequestTask {
		if (listener != null) {
			listener.onStart();
		}
		let client = this.createRequestClient(param!);
		let request = this.createRequest(param!, listener!);
		if (request == null) {
			return new NetworkRequestTaskImpl(null);
		}
		let call: Call = client.newCall(request);

		call.enqueue(new SimpleCallback(listener));

		let task = new NetworkRequestTaskImpl(call);
		return task;
	}

	public createRequestClient<T>(param: RequestOptions<T>): OkHttpClient {
		let clientBuilder = OkHttpClient.Builder();
		const timeout: Long = param.timeout != null ? param.timeout!.toLong() : 60000;
		clientBuilder.connectTimeout(timeout, TimeUnit.MILLISECONDS);
		clientBuilder.readTimeout(timeout, TimeUnit.MILLISECONDS);
		clientBuilder.writeTimeout(timeout, TimeUnit.MILLISECONDS);
		clientBuilder.callTimeout(timeout, TimeUnit.MILLISECONDS);
		clientBuilder.protocols(Collections.singletonList(Protocol.HTTP_1_1));

		clientBuilder.addInterceptor(new CookieInterceptor());



		if (param.firstIpv4 != null) {
			let firstIpv4 = param.firstIpv4!;
			if (firstIpv4) {
				let okDns = new OKDns();
				clientBuilder.dns(okDns);
			}
		}
		// let requestHost = Uri.parse(param.url).getHost();

		//todo tls暂时搁置
		//todo 把call保存起来， 存储到task里面，等待调用。
		// let tlsOption: UTSJSONObject = param.tls;
		// if (tlsOption != null) {
		// 	let sslConfig = new SSLConfig();
		// 	sslConfig.setKeystore(tlsOption['keystore']);
		// 	sslConfig.setStorePass(tlsOption['storePass']);
		// 	let caArray:JSONArray = tlsOption['ca'];
		// 	let caParam:Array<string> = null;
		// 	if (caArray != null){
		// 		caParam = caArray.toArray(emptyArray<String>());
		// 	}
		// 	sslConfig.setCa(caParam);

		// 	clientBuilder.sslSocketFactory(SSLFactoryManager.getInstance().getSSLSocketFactory(sslConfig));
		// 	clientBuilder.hostnameVerifier(OkHostnameVerifier.INSTANCE);
		// }

		if (NetworkManager.connectPool == null) {
			NetworkManager.connectPool = new ConnectionPool();
		}

		clientBuilder.connectionPool(NetworkManager.connectPool);

		if (this.requestExecutorService == null) {
			this.requestExecutorService = Executors.newFixedThreadPool(10);
		}

		clientBuilder.dispatcher(new Dispatcher(this.requestExecutorService));

		return clientBuilder.build();
	}

	public createRequest<T>(param: RequestOptions<T>, listener: NetworkRequestListener): Request | null {

		let requestBilder = new Request.Builder();
		try {
			requestBilder.url(param.url);
		} catch (e: Exception) {
			let option = {};
			option['statusCode'] = '-1';
			option['errorCode'] = '600009';
			option['errorMsg'] = "invalid URL";
			option['cause'] = e;
			if (listener != null) {
				listener.onComplete(option);
			}
			return null;
		}

		let ua = UTSAndroid.getWebViewInfo(UTSAndroid.getAppContext()!)["ua"].toString();
		requestBilder.header("User-Agent", ua);

		if (param.header == null) {
			param.header = {}
		}

		let contentType = "application/x-www-form-urlencoded; charset=UTF-8";
		let hasContentType = false;
		let headers = param.header!.toJSONObject() as JSONObject;
		for (key in headers.keys) {
			if (key.equals("Content-Type", true)) {
				contentType = "" + headers![key]!;
				hasContentType = true;
			}
			requestBilder.header(key, "" + headers[key]);
		}

		if (!hasContentType) {
			if (!"GET".equals(param.method)) {
				contentType = "application/json";
			}
		}

		if ("POST".equals(param.method) || "PUT".equals(param.method) || "PATCH".equals(param.method) || "DELETE".equals(param.method)) {
			if (param.data != null && listener != null) {
				listener.onProgress(0);
			}

			let body: string = "";
			if (param.data != null) {
				if (typeof(param.data) == 'string') {
					body = param.data as string;
				} else if (param.data instanceof UTSJSONObject){
					if(contentType.indexOf("application/x-www-form-urlencoded") == 0){
						const data = param.data as UTSJSONObject;
						const map:Map<string, any|null> = data.toMap();
						const bodyArray = new Array<string>();
						map.forEach((value, key)=>{
							bodyArray.push(key + "="+ value);
						})
						body = bodyArray.join("&");
					}else{
						body = JSON.stringify(param.data);
					}
				}
			}
			let requestBody = RequestBody.create(MediaType.parse(contentType), body);
			requestBilder.method(param.method, requestBody);
			if (listener != null) {
				listener.onProgress(100);
			}
		} else if ("HEAD".equals(param.method)) {
			requestBilder.head();
		}else if ("OPTIONS".equals(param.method)) {
			requestBilder.method(param.method, null);
		} else if (param.method == null || "GET".equals(param.method)){
			const data = param.data;
			if (data != null) {
				let json: UTSJSONObject | null = null;
				if (typeof(data) == 'string') {
					json = JSON.parseObject(data as string);
				}else if(data instanceof UTSJSONObject) {
					json = data;
				}
				if (json != null){
					let url = param.url;
					try {
						requestBilder.url(this.stringifyQuery(url, json));
					} catch (e: Exception) {
						let option = {};
						option['statusCode'] = '-1';
						option['errorCode'] = '600009';
						option['errorMsg'] = "invalid URL";
						option['cause'] = e;
						if (listener != null) {
							listener.onComplete(option);
						}
						return null;
					}
				}
			}
		}
		

		return requestBilder.build();
	}
	
	/**
	 * data拼接到url上
	 */
	private stringifyQuery(url: string, data: UTSJSONObject) : string{
		let newUrl = url;
		//http:xxx/xxx?a=b&c=d#123
		let str = url.split('#')
		let hash = ''
		if(str.length > 1){
			hash = str[1] //123
		}
		str = str[0].split('?') 
		let query = '' 
		if(str.length > 1){
			query = str[1] //a=b&c=d
		}
		newUrl = str[0]   // http:xxx/xxx
		const pairs = query.split('&')
		const queryMap = new Map<string, string>();
		pairs.forEach((item, _)=>{
			const temp = item.split('=')
			if(temp.length > 1){
				queryMap[temp[0]] = temp[1]
			}
		});
		const dataMap: Map<string, any|null> = data.toMap();
		dataMap.forEach((value, key)=>{
			if(value == null){
				value = "";
			}
			let encodeKey = encodeURIComponent(key)!
			if (value instanceof UTSJSONObject || value instanceof Array<any|null>){
				queryMap[encodeKey] = encodeURIComponent(JSON.stringify(value))!
			}else{
				queryMap[encodeKey] = encodeURIComponent("" + value)!;
			}
		})
		let queryStr = "";
		queryMap.forEach((value, key)=>{
			queryStr += key + "=" + value + "&"
		});
		queryStr = queryStr.slice(0, -1);
		if(queryStr.length > 0){
			newUrl += "?" + queryStr;
		}
		if(hash.length > 0){
			newUrl += "#" + hash;
		}
		return newUrl;
	}


	public uploadFile(options: UploadFileOptions, listener: NetworkUploadFileListener): UploadTask {
		return UploadController.getInstance().uploadFile(options, listener);
	}

	public downloadFile(options: DownloadFileOptions, listener: NetworkDownloadFileListener): DownloadTask {
		return DownloadController.getInstance().downloadFile(options, listener);
	}


}

class SimpleCallback implements Callback {
	private listener?: NetworkRequestListener = null;
	constructor(listener: NetworkRequestListener) {
		this.listener = listener;
	}

	override onResponse(call: Call, response: Response): void {
		let headers: Headers = response.headers();
		let headerMap = headers.toMultimap();
		let code = response.code();
		let option = {};
		option["statusCode"] = code + "";

		let pListener = this.listener;

		if (pListener != null) {
			pListener.onHeadersReceived(code, headerMap);
		}

		let rawStream = response.body()!.byteStream()!;
		if (response.isSuccessful()) {
			option['originalData'] = this.readInputStreamAsBytes(rawStream, this.listener);
		} else {
			option['errorMsg'] = this.readInputStream(rawStream, this.listener);
		}

		if (pListener != null) {
			pListener.onComplete(option);
		}
	}
	override onFailure(call: Call, e: IOException): void {
		let pListener = this.listener;
		let option = {};
		option['statusCode'] = '-1';
		option['errorCode'] = '602001';
		option['errorMsg'] = e.message;
		option['cause'] = e;
		if (pListener != null) {
			pListener.onComplete(option);
		}
	}


	private readInputStreamAsBytes(inputSteam?: InputStream, listener?: NetworkRequestListener): ByteArray | null {
		if (inputSteam == null) {
			return null;
		}
		let buffer = new ByteArrayOutputStream();

		let readCount = 0;
		let data = new ByteArray(2048);

		do {
			let len = inputSteam.read(data, 0, data.size);
			if (len == -1) {
				break;
			}
			buffer.write(data, 0, len);
			readCount += len;
			if (listener != null) {
				listener.onProgress(readCount);
			}

		} while (true);

		buffer.flush();
		return buffer.toByteArray();
	}

	private readInputStream(inputSteam?: InputStream, listener?: NetworkRequestListener): string | null {
		if (inputSteam == null) {
			return null;
		}

		let builder = new StringBuilder();
		let localBufferedReader = new BufferedReader(new InputStreamReader(inputSteam));
		let data = new CharArray(2048);
		do {
			let len = localBufferedReader.read(data);
			if (len == -1) {
				break;
			}
			builder.append(data, 0, len);
			if (listener != null) {
				listener.onProgress(builder.length);
			}
		} while (true);
		localBufferedReader.close();

		return builder.toString();
	}
}


export {
	NetworkManager,
	NetworkRequestListener,
	NetworkUploadFileListener,
	NetworkDownloadFileListener
}