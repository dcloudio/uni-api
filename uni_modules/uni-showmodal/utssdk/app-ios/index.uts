import { UIAlertController, UIAlertAction, UITextField } from "UIKit"
import { UTSiOS } from "DCloudUTSFoundation"
import { DispatchQueue } from 'Dispatch';

type ShowModalResult = {
	errCode: number,
	errSubject: string,
	errMsg: string,
	confirm: boolean,
	cancel: boolean,
	content: string
}

type ShowModalOptions = {
	title?: string,
	content?: string,
	showCancel: boolean,
	cancelText?: string,
	cancelColor?: string,
	confirmText?: string,
	confirmColor?: string,
	editable: boolean,
	placeholderText?: string,
	success?: (res: ShowModalResult) => void,
	fail?: (res: ShowModalResult) => void,
	complete?: (res: ShowModalResult) => void
}

export default function showModal(options: ShowModalOptions) {
	const title = options.title == null ? "" : options.title!
	const message = options.content == null ? "" : options.content!
	const showCancel = options.showCancel == null ? true : (options.showCancel != false)
	const cancelText = options.cancelText == null ? "取消" : options.cancelText!
	const confirmText = options.confirmText == null ? "确定" : options.confirmText!
	const canEidt = options.editable == true
	const placeholderText = options.placeholderText == null ? "" : options.placeholderText!

	// uts方法默认会在子线程中执行，涉及 UI 操作必须在主线程中运行，通过 DispatchQueue.main.async 方法可将代码在主线程中运行
	DispatchQueue.main.async(execute = (): void => {

		// 初始化 UIAlertController 实例对象 alert
		let alert = new UIAlertController(title = title, message = message, preferredStyle = UIAlertController.Style.alert)

		if (canEidt == true) {
			// 在 alert 上添加输入框
			console.log("需要加上输入框")
			alert.addTextField(configurationHandler = (tf: UITextField): void => {
				// 添加成功的回调
				// 设置输入框的 placeholder 
				tf.placeholder = placeholderText
			})
		}

		// 创建 UIAlertAction 按钮
		let okAction = new UIAlertAction(title = confirmText, style = UIAlertAction.Style.default, handler = (action: UIAlertAction): void => {
			// 获取输入框中的内容
			let inputText = ""
			if (canEidt == true) {
				let tf = alert.textFields?.[0]
				if (tf != null) {
					inputText = tf!.text != null ? tf!.text! : ""
				}
			}

			// 点击按钮的回调方法
			const res = new ShowModalResult()
			res.errCode = 0
			res.errSubject = ""
			res.errMsg = ""
			res.confirm = false
			res.cancel = true
			res.content = inputText
			options.success?.(res)
			options.complete?.(res)

		})

		if (options.confirmColor != null) {
			const color = UTSiOS.colorWithString(options.confirmColor!)
			okAction.setValue(color, forKey = "titleTextColor")
		}

		// 将 UIAlertAction 添加到 alert 上
		alert.addAction(okAction)

		if (showCancel == true) {
			// 创建 UIAlertAction 按钮
			let cancelAction = new UIAlertAction(title = cancelText, style = UIAlertAction.Style.cancel, handler = (action: UIAlertAction): void => {
				// 点击按钮的回调方法
				const res = new ShowModalResult()
				res.errCode = 0
				res.errSubject = ""
				res.errMsg = ""
				res.confirm = false
				res.cancel = true
				res.content = ""
				options.success?.(res)
				options.complete?.(res)
			})
			if (options.cancelColor != null) {
				const color = UTSiOS.colorWithString(options.cancelColor!)
				cancelAction.setValue(color, forKey = "titleTextColor")
			}
			alert.addAction(cancelAction)
		}
		// 打开 alert 弹窗
		UTSiOS.getCurrentViewController().present(alert, animated = true)
	})
}

