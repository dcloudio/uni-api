import {
    getOSRuntime,
    getCurrentPage
} from '@dcloudio/uni-runtime'
import {
    PreviewImageOptions,
    PreviewImageSuccess,
    PreviewImage,
    ClosePreviewImageOptions,
    ClosePreviewImageSuccess,
    ClosePreviewImage
} from '../../interface.uts'
import {
    API_PREVIEW_IMAGE,
    PreviewImageApiOptions,
    PreviewImageApiProtocol,
    API_CLOSE_PREVIEW_IMAGE
} from '../../protocol.uts'
import {
    getRealPath
} from '@dcloudio/uni-runtime'

interface IPreviewImageOptions {
    urls: string[]
    current: string
    showmenu: boolean
}

export const previewImage: PreviewImage = defineAsyncApi<PreviewImageOptions, PreviewImageSuccess>(
    API_PREVIEW_IMAGE,
    function (options: PreviewImageOptions, exec: ApiExecutor<PreviewImageSuccess>) {
        interface Page {
            $getAppWebview: Function
        }
        const currentPage = getCurrentPage() as Page
        getOSRuntime().previewImage(
            {
                urls: options.urls.map(url => getRealPath(url) as string),
                current: options.current || '',
                showmenu: options.showmenu === false ? false : true,
            } as IPreviewImageOptions,
            currentPage.$getAppWebview().page as Object
        )
        exec.resolve({
            errSubject: 'uni-previewImage',
            errMsg: ''
        } as PreviewImageSuccess)
    },
    PreviewImageApiProtocol,
    PreviewImageApiOptions
) as PreviewImage

export const closePreviewImage: ClosePreviewImage = defineAsyncApi<ClosePreviewImageOptions, ClosePreviewImageSuccess>(
    API_CLOSE_PREVIEW_IMAGE,
    function (options: ClosePreviewImageOptions, exec: ApiExecutor<ClosePreviewImageSuccess>) {
        getOSRuntime().closePreviewImage()
        exec.resolve({
            errMsg: ''
        } as ClosePreviewImageSuccess)
    }
) as ClosePreviewImage
