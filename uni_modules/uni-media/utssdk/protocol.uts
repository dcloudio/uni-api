import {
    GetImageInfoOptions,
    ChooseImageOptions,
    GetVideoInfoOptions,
    ChooseVideoOptions,
    PreviewImageOptions
} from './interface.uts'
import {
    getRealPath,
} from '@dcloudio/uni-runtime'

// getImageInfo
export const API_GET_IMAGE_INFO = 'getImageInfo';
export const GetImageInfoApiProtocol = new Map<string, ProtocolOptions>([
    [
        'src',
        {
            type: 'string',
            required: true
        }
    ]
])

export const GetImageInfoApiOptions: ApiOptions<GetImageInfoOptions> = {
    formatArgs: new Map<string, Function>([
        [
            'src',
            function (src: string, params: GetImageInfoOptions) {
                params.src = getRealPath(src)
            }
        ]
    ])
}

// chooseImage
export const API_CHOOSE_IMAGE = 'chooseImage';
export const ChooseImageApiProtocol = new Map<string, ProtocolOptions>([
    [
        'count',
        {
            type: 'number',
            required: false
        }
    ],
    [
        'sizeType',
        {
            type: 'array',
            required: false
        }
    ],
    [
        'sourceType',
        {
            type: 'array',
            required: false
        }
    ],
    [
        'extension',
        {
            type: 'array',
            required: false
        }
    ]
])

export const ChooseImageApiOptions: ApiOptions<ChooseImageOptions> = {
    formatArgs: new Map<string, Function>([
        [
            'count',
            function (count: number, params: ChooseImageOptions) {
                if (count == null) {
                    params.count = 9
                }
            }
        ],
        [
            'sizeType',
            function (sizeType: string[], params: ChooseImageOptions) {
                if (sizeType == null) {
                    params.sizeType = ['original', 'compressed']
                }
            }
        ],
        [
            'sourceType',
            function (sourceType: string[], params: ChooseImageOptions) {
                if (sourceType == null) {
                    params.sourceType = ['album', 'camera']
                }
            }
        ],
        [
            'extension',
            function (extension: string[], params: ChooseImageOptions) {
                if (extension == null) {
                    params.extension = ['*']
                }
            }
        ]
    ])
}

// getVideoInfo
export const API_GET_VIDEO_INFO = 'getVideoInfo';
export const GetVideoInfoApiProtocol = new Map<string, ProtocolOptions>([
    [
        'src',
        {
            type: 'string',
            required: true
        }
    ]    
])
export const GetVideoInfoApiOptions: ApiOptions<GetVideoInfoOptions> = {
    formatArgs: new Map<string, Function>([
        [
            'src',
            function (src: string, params: GetVideoInfoOptions) {
                params.src = getRealPath(src)
            }
        ]
    ])
}

// chooseVideo
export const API_CHOOSE_VIDEO = 'chooseVideo';
export const ChooseVideoApiProtocol = new Map<string, ProtocolOptions>([
    [
        'sourceType',
        {
            type: 'array',
            required: false
        }
    ],
    [
        'compressed',
        {
            type: 'boolean',
            required: false
        }
    ],
    [
        'maxDuration',
        {
            type: 'number',
            required: false
        }
    ],
    [
        'camera',
        {
            type: 'string',
            required: false
        }
    ],
    [
        'extension',
        {
            type: 'array',
            required: false
        }
    
    ]
])
export const ChooseVideoApiOptions : ApiOptions<ChooseVideoOptions> = {
    formatArgs: new Map<string, Function>([
        [
            'sourceType',
            function (sourceType: string[], params: ChooseVideoOptions) {
                if (sourceType == null) {
                    params.sourceType = ['album', 'camera']
                }
            }
        ],
        [
            'compressed',
            function (compressed: boolean, params: ChooseVideoOptions) {
                if (compressed == null) {
                    params.compressed = true
                }
            }
        ],
        [
            'maxDuration',
            function (maxDuration: number, params: ChooseVideoOptions) {
                if (maxDuration == null) {
                    params.maxDuration = 60
                }
            }
        ],
        [
            'camera',
            function (camera: string, params: ChooseVideoOptions) {
                if (camera == null) {
                    params.camera = 'back'
                }
            }
        ],
        [
            'extension',
            function (extension: string[], params: ChooseVideoOptions) {
                if (extension == null) {
                    params.extension = ['*']
                }
            }
        ]
    ])
}

export const API_PREVIEW_IMAGE = 'previewImage';
export const PreviewImageApiProtocol = new Map<string, ProtocolOptions>([
    [
        'urls',
        {
            type: 'array',
            required: true
        }
    ],
    [
        'current',
        {
            type: 'string',
            required: false
        }
    ]
])
export const PreviewImageApiOptions: ApiOptions<PreviewImageOptions> = {
    formatArgs: new Map<string, Function>([
        [
            'urls',
            function (urls: string[], params: PreviewImageOptions) {
                params.urls = urls.map(url => getRealPath(url) as string)
            }
        ]
    ])
}

export const API_CLOSE_PREVIEW_IMAGE = 'closePreviewImage';

export const API_SAVE_IMAGE_TO_PHOTOS_ALBUM = 'saveImageToPhotosAlbum';
export const SaveImageToPhotosAlbumApiProtocol = new Map<string, ProtocolOptions>([
    [
        'filePath',
        {
            type: 'string',
            required: true
        }
    ]
])

export const API_SAVE_VIDEO_TO_PHOTOS_ALBUM = 'saveVideoToPhotosAlbum';
export const SaveVideoToPhotosAlbumApiProtocol = new Map<string, ProtocolOptions>([
    [
        'filePath',
        {
            type: 'string',
            required: true
        }
    ]
])
