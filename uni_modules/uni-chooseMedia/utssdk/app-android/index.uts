import {
	ChooseMedia, ChooseMediaOptions, ChooseMediaPageOrientation, ChooseMediaSuccess, ChooseMediaTempFile
} from "../interface.uts"
import { ChooseMediaErrorImpl, UniError_ChooseMedia } from "../unierror.uts"
import BitmapFactory from "android.graphics.BitmapFactory";
import MediaMetadataRetriever from 'android.media.MediaMetadataRetriever';
import Exception from 'java.lang.Exception';
import Intent from 'android.content.Intent';
import MediaStore from 'android.provider.MediaStore';
import Media from "uts.sdk.modules.DCloudUniMedia.Media";
import Parcelable from 'android.os.Parcelable';
import FileProvider from 'androidx.core.content.FileProvider';
import Build from 'android.os.Build';
import Manifest from 'android.Manifest';
import Locale from 'java.util.Locale';
import File from 'java.io.File';
import MediaExtractor from 'android.media.MediaExtractor';
import MediaFormat from 'android.media.MediaFormat';
import TextUtils from 'android.text.TextUtils';
import FileOutputStream from 'java.io.FileOutputStream';
import FileInputStream from 'java.io.FileInputStream';
import InputStream from 'java.io.InputStream';
import Cursor from 'android.database.Cursor';
import OpenableColumns from 'android.provider.OpenableColumns';
import Uri from 'android.net.Uri';
import OutputStream from 'java.io.OutputStream';
import BitmapFactory from 'android.graphics.BitmapFactory';
import BigDecimal from 'java.math.BigDecimal';
import Bitmap from 'android.graphics.Bitmap';
import DecimalFormat from 'java.text.DecimalFormat';

const mediaCachePath = UTSAndroid.getAppCachePath() + "uni-media/"
const ASSETS_PATH = '/android_asset/'
export const chooseMedia : ChooseMedia = function (options : ChooseMediaOptions) {
	chooseMediaAll(options)
}

function chooseMediaAll(options : ChooseMediaOptions) {
	uniChooseMedia(options, (count : number, compressed : boolean, index : number) => {
		if (index == 1) {
			if (Build.VERSION.SDK_INT > 32 || UTSAndroid.getUniActivity()!.applicationInfo.targetSdkVersion >= 33) {
				openAlbumForMedia(options, count, getMediaType(options.mediaType))
			} else {
				UTSAndroid.requestSystemPermission(UTSAndroid.getUniActivity()!, [android.Manifest.permission.READ_EXTERNAL_STORAGE], (a : boolean, b : string[]) => {
					openAlbumForMedia(options, count, getMediaType(options.mediaType))
				}, (a : boolean, b : string[]) => {
					let error = new ChooseMediaErrorImpl(1101005, UniError_ChooseMedia);
					options.fail?.(error)
					options.complete?.(error)
				})
			}
		} else {
			if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
				let requestPermissionList : Array<string> = [Manifest.permission.CAMERA]
				UTSAndroid.requestSystemPermission(UTSAndroid.getUniActivity()!, requestPermissionList, (a : boolean, b : string[]) => {
					if (index == 0) {
						openCameraForMediaImage(options, compressed)
					} else if (index == 2) {
						openCameraForMediaVideo(options, compressed)
					}
				}, (a : boolean, b : string[]) => {
					// 失败回调
					let error = new ChooseMediaErrorImpl(1101005, UniError_ChooseMedia);
					options.fail?.(error)
					options.complete?.(error)
				})
			} else {
				if (index == 0) {
					openCameraForMediaImage(options, compressed)
				} else if (index == 2) {
					openCameraForMediaVideo(options, compressed)
				}
			}
		}
	})
}
function uniChooseMedia(options : ChooseMediaOptions, onSourceTypeSelect : (count : number, compressed : boolean, index : number) => void) {
	let count = options.count != null ? (options.count! <= 0 ? 9 : options.count) : 9
	// 默认为 false
	let compressed = false;

	/* source type 乱传如何处理 */
	let sourceType : Array<string> = (options.sourceType != null && options.sourceType!.length > 0) ? options.sourceType! : ["album", "camera"];
	var mediaType = options.mediaType
	if (mediaType == null) {
		mediaType = ["image", "video"]
	}
	var itemList : Array<string> = []
	if (sourceType.contains("camera")) {
		if (mediaType!.contains("mix")) {
			itemList = ["拍摄", "录像"]
		} else if (mediaType.contains("image") && mediaType.contains("video")) {
			itemList = ["拍摄", "录像"]
		} else if (mediaType.contains("image")) {
			itemList = ["拍摄"]
		} else if (mediaType.contains("video")) {
			itemList = ["录像"]
		} else {
			itemList = ["拍摄", "录像"]
		}
	}
	if (sourceType.contains("album")) {
		itemList.add("从相册选择")
	}
	if (itemList.length == 1) {
		onMediaTypeSelect(count!, compressed, itemList[0], onSourceTypeSelect)
		return
	} else if (itemList.length > 1) {
		uni.showActionSheet({
			itemList: itemList,
			success: (e) => {
				onMediaTypeSelect(count!, compressed, itemList[e.tapIndex!], onSourceTypeSelect)
			},
			fail: (e) => {
				let error = new ChooseMediaErrorImpl(1101001, UniError_ChooseMedia);
				options.fail?.(error)
				options.complete?.(error)
			}
		})
	}
}

function onMediaTypeSelect(count : number, compressed : boolean, item : string, onSourceTypeSelect : (count : number, compressed : boolean, index : number) => void) {
	switch (item) {
		case "拍摄": {
			onSourceTypeSelect(count!, compressed, 0)
			break
		}
		case "从相册选择": {
			onSourceTypeSelect(count!, compressed, 1)
			break
		}
		case "录像": {
			onSourceTypeSelect(count!, compressed, 2)
			break
		}
	}
}

function getMediaType(types ?: Array<string> | null) : number {
	if (types == null) {
		return 101;
	} else {
		var typeStr = types!.toString().lowercase(Locale.ENGLISH)
		if (typeStr.contains("mix")) {
			return 101;
		} else if (typeStr.contains("image") && typeStr.contains("video")) {
			return 101;
		} else if (typeStr.contains("image")) {
			return 100;
		} else if (typeStr.contains("video")) {
			return 102;
		} else {
			return 101;
		}
	}
}
var takeVideoFunction : ((requestCode : Int, resultCode : Int, data ?: Intent) => void) | null = null
function openCameraForMediaVideo(option : ChooseMediaOptions, compressed : boolean) {
	const cameraCode = 23;
	if (takeVideoFunction != null) {
		UTSAndroid.offAppActivityResult(takeVideoFunction!)
	}
	let cameraPath = (mediaCachePath + System.currentTimeMillis() + ".mp4") // .mp4为默认配置
	try {
		let picFile = new File(cameraPath);
		if (!picFile.getParentFile().exists()) {
			picFile.getParentFile().mkdirs()
		}
		takeVideoFunction = (requestCode : Int, resultCode : Int, data ?: Intent) => {
			if (cameraCode == requestCode) {
				UTSAndroid.offAppActivityResult(takeVideoFunction!)
				if (resultCode == -1) {
					if (picFile.exists()) {
						var tempFile = getMediaFileByType(cameraPath, 3)
						if (tempFile != null) {
							var type = "video"
							let success : ChooseMediaSuccess = {
								tempFiles: [tempFile],
								type: type
							}
							option.success?.(success)
							option.complete?.(success)
						} else {
							let error = new ChooseMediaErrorImpl(1101001, UniError_ChooseMedia);
							option.fail?.(error)
							option.complete?.(error)
						}
					} else {
						let error = new ChooseMediaErrorImpl(1101008, UniError_ChooseMedia);
						option.fail?.(error)
						option.complete?.(error)
					}
				} else {
					let error = new ChooseMediaErrorImpl(1101001, UniError_ChooseMedia);
					option.fail?.(error)
					option.complete?.(error)
				}
			}
		}
		UTSAndroid.onAppActivityResult(takeVideoFunction!)
		let picUri : Uri = FileProvider.getUriForFile(UTSAndroid.getUniActivity()!, UTSAndroid.getUniActivity()!.packageName + ".dc.fileprovider", picFile);
		let intent = new Intent(MediaStore.ACTION_VIDEO_CAPTURE);
		intent.putExtra(MediaStore.EXTRA_OUTPUT, picUri);
		if (option.maxDuration != null && option.maxDuration! > 0) {
			intent.putExtra(MediaStore.EXTRA_DURATION_LIMIT, option.maxDuration!);
		}
		if (option.camera != null && option.camera! == "front") {
			intent.putExtra("android.intent.extras.CAMERA_FACING", 1);//前置摄像
		} else {
			intent.putExtra("android.intent.extras.CAMERA_FACING", 0);//后置摄像
		}
		UTSAndroid.getUniActivity()?.startActivityForResult(intent, cameraCode.toInt())
	} catch (e : Exception) { }
}
var takeCameraFunction : ((requestCode : Int, resultCode : Int, data ?: Intent) => void) | null = null
function openCameraForMediaImage(option : ChooseMediaOptions, compressed : boolean) {
	const cameraCode = 24;
	const IMAGE_CAPTURE_EDIT = 5011;
	if (takeCameraFunction != null) {
		UTSAndroid.offAppActivityResult(takeCameraFunction!)
	}
	let cameraPath = (mediaCachePath + System.currentTimeMillis() + ".jpg") // .jpg为默认配置
	try {
		let picFile = new File(cameraPath);
		if (!picFile.getParentFile().exists()) {
			picFile.getParentFile().mkdirs()
		}
		takeCameraFunction = (requestCode : Int, resultCode : Int, data ?: Intent) => {
			if (cameraCode == requestCode) {
				UTSAndroid.offAppActivityResult(takeCameraFunction!)
				if (resultCode == -1) {
					if (picFile.exists()) {
						// 图片裁切， 宽高都存在，且都大于0
						var tempFile = getMediaFileByType(cameraPath, 1)
						if (tempFile != null) {
							var type = "image"
							let success : ChooseMediaSuccess = {
								tempFiles: [tempFile],
								type: type
							}
							option.success?.(success)
							option.complete?.(success)
						} else {
							let error = new ChooseMediaErrorImpl(1101001, UniError_ChooseMedia);
							option.fail?.(error)
							option.complete?.(error)
						}
					} else {
						let error = new ChooseMediaErrorImpl(1101008, UniError_ChooseMedia);
						option.fail?.(error)
						option.complete?.(error)
					}
				} else {
					let error = new ChooseMediaErrorImpl(1101001, UniError_ChooseMedia);
					option.fail?.(error)
					option.complete?.(error)
				}
			}
		}
		UTSAndroid.onAppActivityResult(takeCameraFunction!)
		let picUri : Uri = FileProvider.getUriForFile(UTSAndroid.getUniActivity()!, UTSAndroid.getUniActivity()!.packageName + ".dc.fileprovider", picFile);
		let intent = new Intent(MediaStore.ACTION_IMAGE_CAPTURE);
		intent.putExtra(MediaStore.EXTRA_OUTPUT, picUri);
		UTSAndroid.getUniActivity()?.startActivityForResult(intent, cameraCode.toInt())
	} catch (e : Exception) { }
}

const GALLERY_MEDIA_PICKER_RESULT = 1004;
var openMediaFunction : ((requestCode : Int, resultCode : Int, data ?: Intent) => void) | null = null
function openAlbumForMedia(option : ChooseMediaOptions, count : number, type : number) {
	if (openMediaFunction != null) {
		UTSAndroid.offAppActivityResult(openMediaFunction!)
	}
	openMediaFunction = (requestCode : Int, resultCode : Int, data ?: Intent) => {
		if (requestCode == GALLERY_MEDIA_PICKER_RESULT) {
			UTSAndroid.offAppActivityResult(openMediaFunction!)
			var mediaTempFile : Array<ChooseMediaTempFile> = []
			var resultTypes : Array<String> = []
			if (data != null) {
				let selectMediaResult : kotlin.collections.ArrayList<Parcelable> | null = data!!.getParcelableArrayListExtra("select_result");
				if (selectMediaResult != null)
					for (var index = 0; index < selectMediaResult!.size; index++) {
						var element = selectMediaResult[index.toInt()] as Media;
						var tempFile = getMediaFileByType(element.path, element.mediaType)
						if (tempFile != null) {
							mediaTempFile.add(tempFile!)
							if (resultTypes.indexOf(tempFile.fileType) == -1) {
								resultTypes.add(tempFile.fileType)
							}
						}
					}
			}
			if (mediaTempFile.size == 0) {
				let error = new ChooseMediaErrorImpl(1101001, UniError_ChooseMedia);
				option.fail?.(error)
				option.complete?.(error)
			} else {
				var mediaType = ""
				if (option.mediaType != null) {
					if (option.mediaType!.toString().lowercase(Locale.ENGLISH).contains("mix")) {
						mediaType = "mix"
					} else {
						mediaType = TextUtils.join(",", resultTypes)
					}
				} else {
					mediaType = TextUtils.join(",", resultTypes)
				}
				let success : ChooseMediaSuccess = {
					tempFiles: mediaTempFile,
					type: mediaType
				}
				option.success?.(success)
				option.complete?.(success)
			}
		}
	}
	UTSAndroid.onAppActivityResult(openMediaFunction!)
	openGalleryActivity(count, type, false, null, null, option.pageOrientation, null);
}

function openGalleryActivity(count : number, type : number, compressed : boolean, sizeType ?: (string[]) | null, crop ?: any | null, pageOrientation ?: ChooseMediaPageOrientation | null, useSystem : string | null) {
	let selected : Array<string> = [];// 已选中的图片
	let maximum = -1;
	let editable = true; // 是否可编辑，对应editable
	let doneBtnText = "" // 完成按钮文字可编辑
	// let compressed = false; // 视频压缩，对应“videoCompress”

	let albumIntent = new Intent()
	albumIntent.setClassName(UTSAndroid.getUniActivity()!!, "uts.sdk.modules.DCloudUniMedia.SystemPickerActivity");
	albumIntent.putExtra(/* SELECT_MODE = */"select_mode",/* PICKER_IMAGE_VIDEO = */type)
	albumIntent.putExtra(/* SINGLE_SELECT = */"single_select", false)
	albumIntent.putExtra(/* COMPRESSED = */"COMPRESSED", compressed)
	albumIntent.putExtra(/* MAX_SELECT_COUNT = */"max_select_count", count)
	// albumIntent.putExtra(/* DEFAULT_SELECTED_LIST = */"default_list",null); // 暂未对非uni的属性进行支持
	// albumIntent.putExtra(/* SELECTED_MAX_CALLBACK_ID = */"select_max_cb_id","") // 暂未对非uni的属性进行支持
	// albumIntent.putExtra(/* DONE_BUTTON_TEXT = */"done_button_text","")  // 暂未对非uni的属性进行支持
	if (sizeType != null) {
		albumIntent.putExtra(/* PickerConfig.SIZE_TYPE */"size_type", JSON.stringify(sizeType!))
	}
	albumIntent.putExtra(/* DOC_PATH = */"doc_path", mediaCachePath)
	albumIntent.putExtra(/* IMAGE_EDITABLE = */"image_editable", true);
	albumIntent.putExtra("page_orientation", getOrientation(pageOrientation))
	albumIntent.putExtra("copy_privacy_path", !UTSAndroid.isUniAppX())
	UTSAndroid.getUniActivity()!!.startActivityForResult(albumIntent, GALLERY_MEDIA_PICKER_RESULT.toInt())
}

function getMediaFileByType(path : string, mimeType : number) : ChooseMediaTempFile | null {
	if (path.startsWith("content://")) {
		var type = UTSAndroid.getUniActivity()!.getContentResolver().getType(Uri.parse(path))
		if (type!.startsWith("image/")) {
			return getMediaTempFile(path, 1)
		} else if (type.startsWith("video")) {
			return getMediaTempFile(path, 3)
		}
	} else {
		if (mimeType == 1 || mimeType == 3) {
			return getMediaTempFile(path, mimeType)
		} else {
			// 尝试自己获取一遍
			var tempPath = path
			if (path.startsWith("file://")) {
				tempPath = path.replace("file://", "")
			}
			try {
				var bopt = new BitmapFactory.Options()
				bopt.inJustDecodeBounds = false
				BitmapFactory.decodeFile(tempPath, bopt)
				// 未触发catch或者获取到了宽高证明是图片
				if (bopt.outHeight >= 0 && bopt.outWidth >= 0) {
					return getMediaTempFile(path, 1)
				} else {
					return getMediaTempFile(path, 3)
				}
			} catch (e) {
				return getMediaTempFile(path, 3)
			}
		}
	}
	return null
}
function getMediaTempFile(path : string, mimeType : number) : ChooseMediaTempFile | null {
	var tempPath : string
	if (path.startsWith("file://") || path.startsWith("content://")) {
		tempPath = path
	} else {
		tempPath = "file://" + path
	}
	if (mimeType == 1) {
		return {
			tempFilePath: tempPath,
			size: getMediaInfo(path),
			fileType: "image"
		} as ChooseMediaTempFile
	} else if (mimeType == 3) {
		var tempThumbPath = mediaCachePath + "video_thumb_" + System.currentTimeMillis() + ".jpg"
		var metadata = getVideoMetadata(path, tempThumbPath)
		if (metadata == null) {
			metadata = {
				duration: 0.0,
				size: 0.0,
				height: 0.0,
				width: 0.0,
				filePath: ""
			}
		}
		return {
			tempFilePath: tempPath,
			fileType: "video",
			thumbTempFilePath: metadata!["filePath"] as string,
			width: metadata == null ? 0 : metadata!["width"] as Number,
			height: metadata == null ? 0 : metadata!["height"] as Number,
			size: metadata == null ? 0 : metadata!["size"] as Number,
			duration: metadata == null ? 0 : metadata!["duration"] as Number,
			byteSize:metadata == null ? 0 : metadata!["byteSize"] as Number,
		} as ChooseMediaTempFile
	}
	return null
}

function getMediaInfo(path : string) : Long {
	if (path.startsWith("content://")) {
		var returnCursor : Cursor | null = null
		var length : Long = 0
		try {
			returnCursor = UTSAndroid.getAppContext()!.getContentResolver().query(Uri.parse(path), null, null, null, null);
			if (returnCursor != null && returnCursor.moveToFirst()) {
				var index = returnCursor.getColumnIndex(OpenableColumns.SIZE)
				if (!returnCursor.isNull(index)) {
					length = returnCursor.getLong(index)
				}
			} else { return 0 }
		} catch (e) {
		} finally {
			if (returnCursor != null) {
				returnCursor.close()
			}
		}
		return length
	} else if (path.startsWith(ASSETS_PATH)) {
		try {
			var stream = UTSAndroid.getUniActivity()!.assets.open(path.replace(ASSETS_PATH, ""))
			var size = stream?.available()
			stream?.close()
			return size!.toLong()
		} catch (e) {
		}
	} else {
		var file = new File(path)
		if (file.exists()) {
			return file.length()
		} else {
			if (path.startsWith("file://")) {
				file = new File(path.replace("file://", ""))
				if (file.exists())
					return file.length()
				else
					return 0
			}
		}
	}
	return 0
}

function getVideoMetadata(src : string, filePath : string | null) : UTSJSONObject | null {
	let videoInfo = {
		duration: 0.0,
		size: 0.0,
		height: 0.0,
		width: 0.0
	}
	var path = src
	var videoFile = new File(src)
	if (!videoFile.exists()) {
		path = UTSAndroid.convert2AbsFullPath(src)
	}
	if (path.startsWith("/android_asset/")) {
		var mediaCachePath = UTSAndroid.getAppCachePath() + "uni-media/_" + System.currentTimeMillis()
		if (copyFile(path, mediaCachePath)) {
			path = mediaCachePath
		} else {
			return null
		}
	}
	if (!videoFile.exists()) {
		videoFile = new File(path)
	}
	if (!videoFile.exists() && !src.startsWith("content://")) {
		return null
	}
	let byteSize = getMediaInfo(path);
	videoInfo.byteSize = byteSize
	videoInfo.size = formatNumber(getMediaInfo(path) / 1024.0);
	try {
		let retriever = new MediaMetadataRetriever()
		if (path.startsWith("content://")) {
			retriever.setDataSource(UTSAndroid.getUniActivity()!, Uri.parse(path))
		} else {
			retriever.setDataSource(path)
		}
		var firstFrameBitmap =
			saveBitmapToLocalPath(retriever.getFrameAtTime(0, MediaMetadataRetriever.OPTION_CLOSEST_SYNC), filePath)
		if (!firstFrameBitmap) {
			videoInfo.filePath = ""
		} else {
			videoInfo.filePath = filePath
		}
		let durationStr : string | null = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_DURATION)
		let width : number | null = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_WIDTH)?.toFloat()
		let height : number | null = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_HEIGHT)?.toFloat()
		let rotation : string | null = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_VIDEO_ROTATION)
		if ("90" == rotation || "270" == rotation) {
			videoInfo.width = height != null ? height! : 0
			videoInfo.height = width != null ? width : 0
		} else {
			videoInfo.width = width != null ? width : 0
			videoInfo.height = height != null ? height : 0
		}
		switch (rotation) {
			case "90":
				rotation = "right";
				break;
			case "270":
				rotation = "left";
				break;
			case "180":
				rotation = "down";
				break;
			default:
				rotation = "up";
				break;
		}
		var duration : number = 0
		if (durationStr != null) {
			try {
				duration = durationStr.toFloat()
			} catch (e) {
			}
		}
		let big : BigDecimal = BigDecimal.valueOf(duration.toDouble() / 1000).setScale(2, BigDecimal.ROUND_HALF_UP)
		videoInfo.duration = big.toFloat()
		videoInfo.orientation = rotation!
		let mimeType : string | null = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_MIMETYPE);
		videoInfo.type = mimeType
		let bitrateStr = retriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_BITRATE);
		var bitrate : number | null = null
		try {
			if (bitrateStr != null) {
				bitrate = (bitrateStr.toFloat() / 1000).toInt()
			}
		} catch (e) { }
		videoInfo.bitrate = bitrate
		var fpsNum : number | null = null
		let fps : string | null = retriever.extractMetadata(32);
		if (TextUtils.isEmpty(fps)) {
			let extractor = new MediaExtractor()
			extractor.setDataSource(UTSAndroid.getUniActivity()!, Uri.parse(path), null)
			let trackCount = extractor.getTrackCount();
			for (var i = 0; i < trackCount; i++) {
				let mediaFormat = extractor.getTrackFormat(i.toInt());
				let mimeType = mediaFormat.getString(MediaFormat.KEY_MIME);
				if (!TextUtils.isEmpty(mimeType) && mimeType!!.startsWith("video/")) {
					let frame = mediaFormat.getInteger(MediaFormat.KEY_FRAME_RATE);
					fpsNum = frame
				}
			}
		} else {
			try { fpsNum = Math.round(((fps!!).toFloat() / (duration)) * 1000) } catch (e) { } // 沿用1.0设计，向上取整
		}
		videoInfo.fps = fpsNum
		return videoInfo
	} catch (e) {
		return null
	}
}

function saveBitmapToLocalPath(bitmap : Bitmap | null, filePath ?: string | null) : boolean {
	if (TextUtils.isEmpty(filePath)) {
		return false
	}
	var file = new File(filePath)
	if (!file.parentFile.exists()) {
		file.parentFile.mkdirs()
	}
	if (!file.exists()) {
		file.createNewFile()
	}
	if (bitmap == null) {
		return false
	}
	var os : OutputStream | null = null
	try {
		os = new FileOutputStream(file)
		bitmap.compress(Bitmap.CompressFormat.JPEG, 100, os)
	} catch (e) {
		return false
	} finally {
		os?.close()
	}
	return true
}
/**
 * 0 LANDSCAPE
 * 1 PORTRAIT
 * 2 USER/AUTO
 */
function getOrientation(pageOrientation ?: ChooseMediaPageOrientation | null) : number {
	if (pageOrientation == null) {
		pageOrientation = getGlobalConfig()
	}
	switch (pageOrientation!) {
		case "auto": {
			return 2
		}
		case "portrait": {
			return 1
		}
		case "landscape": {
			return 6
		}
		default: {
			return 1
		}
	}
}

function getGlobalConfig() : string {
	try {
		var config = Class.forName("io.dcloud.uniapp.framework.IndexKt")
		if (config != null) {
			var cc = config.getDeclaredField("__uniConfig")
			cc.setAccessible(true)
			var uniConfig = cc.get(null)
			if (uniConfig != null) {
				var globalStyle = uniConfig.javaClass.getDeclaredField("globalStyle")
				globalStyle.setAccessible(true)
				var globalStyleValue = globalStyle.get(uniConfig)
				if (globalStyleValue != null && globalStyleValue instanceof Map<Stirng, any>) {
					var pageOrientation = (globalStyleValue["pageOrientation"])
					if (pageOrientation != null) {
						return pageOrientation as string
					} else return "portrait"
				}
			}
			return "portrait"
		} else {
			return "portrait"
		}
	} catch (e) {
		return "portrait"
	}
}

function copyFile(fromFilePath : string, toFilePath : string) : boolean {
	var fis : InputStream | null = null
	try {
		if (fromFilePath.startsWith(ASSETS_PATH)) {
			fis = UTSAndroid.getUniActivity()!.getAssets().open(fromFilePath.replace(ASSETS_PATH, ""));
		} else if (fromFilePath.startsWith("content://")) {
			fis = UTSAndroid.getUniActivity()!.getContentResolver().openInputStream(Uri.parse(fromFilePath))
		} else {
			let fromFile = new File(fromFilePath)
			if (!fromFile.exists()) {
				return false;
			}
			if (!fromFile.isFile()) {
				return false
			}
			if (!fromFile.canRead()) {
				return false;
			}
			fis = new FileInputStream(fromFile);
		}
		if (fis == null) {
			return false
		}
	} catch (e) {
		return false;
	}
	let toFile = new File(toFilePath)
	if (!toFile.getParentFile().exists()) {
		toFile.getParentFile().mkdirs()
	}
	if (!toFile.exists()) {
		toFile.createNewFile()
	}
	try {
		let fos = new FileOutputStream(toFile)
		let byteArrays = ByteArray(1024)
		var c = fis!!.read(byteArrays)
		while (c > 0) {
			fos.write(byteArrays, 0, c)
			c = fis!!.read(byteArrays)
		}
		fis!!.close()
		fos.close()
		return true
	} catch (e) {
		return false;
	}
}
function formatNumber(input:number):number {
	let bd = DecimalFormat("#.###")
	bd.setDecimalSeparatorAlwaysShown(false)
	return bd.format(input).toFloat()
}