import { BusinessError } from '@ohos.base'
import pasteboard from '@ohos.pasteboard'
import { SetClipboardData, GetClipboardData, SetClipboardDataOptions, SetClipboardDataSuccess, GetClipboardDataOptions, GetClipboardDataSuccess } from '../interface.uts';
import { API_GET_CLIPBOARD_DATA, API_SET_CLIPBOARD_DATA, SetClipboardDataApiOptions, SetClipboardDataProtocol } from '../protocol.uts';

export { SetClipboardData, GetClipboardData, SetClipboardDataOptions, SetClipboardDataSuccess, GetClipboardDataOptions, GetClipboardDataSuccess }

type ClipboardCallbackOptions = {
    data: string;
    result: 'success' | 'fail';
}
type ClipboardCallback = (res: ClipboardCallbackOptions) => void
function getString(callback: ClipboardCallback) {
    const systemPasteboard: pasteboard.SystemPasteboard =
        pasteboard.getSystemPasteboard()
    UTSHarmony.requestSystemPermission(
        ['ohos.permission.READ_PASTEBOARD'],
        (allRight: boolean) => {
            if (allRight) {
                const pasteData = systemPasteboard.getDataSync()
                try {
                    const text: string = pasteData.getPrimaryText()
                    callback({ data: text, result: 'success' } as ClipboardCallbackOptions)
                } catch (err) {
                    callback({
                        data: (err as BusinessError<void>).message,
                        result: 'fail',
                    } as ClipboardCallbackOptions)
                }
            } else {
                callback({ data: 'Permission denied', result: 'fail' } as ClipboardCallbackOptions)
            }
        },
        () => {
            callback({ data: 'Permission denied', result: 'fail' } as ClipboardCallbackOptions)
        },
    )
}

function setString(data: string) {
    const pasteData: pasteboard.PasteData = pasteboard.createData(
        pasteboard.MIMETYPE_TEXT_PLAIN,
        data,
    )
    const systemPasteboard: pasteboard.SystemPasteboard =
        pasteboard.getSystemPasteboard()
    try {
        systemPasteboard.setDataSync(pasteData)
        return { data, result: 'success' } as ClipboardCallbackOptions
    } catch (err) {
        return { data: (err as BusinessError<void>).message, result: 'fail' } as ClipboardCallbackOptions
    }
}

export const getClipboardData: GetClipboardData = defineAsyncApi<GetClipboardDataOptions, GetClipboardDataSuccess>(
    API_GET_CLIPBOARD_DATA,
    (_: GetClipboardDataOptions, res: ApiExecutor<GetClipboardDataSuccess>) => {
        getString((ret: ClipboardCallbackOptions) => {
            if (ret.result === 'success') {
                res.resolve({
                    data: ret.data,
                } as GetClipboardDataSuccess)
            } else {
                res.reject('getClipboardData:fail ' + ret.data)
            }
        })
    }
) as GetClipboardData

export const setClipboardData: SetClipboardData = defineAsyncApi<SetClipboardDataOptions, SetClipboardDataSuccess>(
    API_SET_CLIPBOARD_DATA,
    (options: SetClipboardDataOptions, res: ApiExecutor<SetClipboardDataSuccess>) => {
        const ret = setString(options.data)
        if (ret.result === 'success') {
            res.resolve()
        } else {
            res.reject('setClipboardData:fail ' + ret.data)
        }

    },
    SetClipboardDataProtocol,
    SetClipboardDataApiOptions
) as SetClipboardData
