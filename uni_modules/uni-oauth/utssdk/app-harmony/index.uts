import {
  Login, LoginOptions, LoginSuccess, LoginFail,
  GetUserInfo, GetUserInfoOptions, GetUserInfoSuccess, GetUserInfoFail, UserInfo,
  UniOAuthProvider
} from '../interface.uts';
import { API_LOGIN, LoginApiProtocol, API_GET_USER_INFO, GetUserInfoApiProtocol } from '../protocol.uts';

export {
  Login,
  LoginOptions,
  LoginSuccess,
  LoginFail,
  GetUserInfo,
  GetUserInfoOptions,
  GetUserInfoSuccess,
  GetUserInfoFail,
  UserInfo,
  UniOAuthProvider
}

const SERVICE = 'oauth'
const PROVIDER = 'huawei'

export const login: Login = defineAsyncApi<LoginOptions, LoginSuccess>(
  API_LOGIN,
  function (args: LoginOptions, executor: ApiExecutor<LoginSuccess>) {
    const provider = getUniProvider<UniOAuthProvider>(SERVICE, args.provider ?? PROVIDER)
    if (!provider) {
      executor.reject('Provider not found.')
      return
    }
    provider.login({
      success(res) {
        executor.resolve(res)
      },
      fail(err) {
        executor.reject(err.errMsg)
      }
    } as LoginOptions)
  },
  LoginApiProtocol
) as Login

export const getUserInfo: GetUserInfo = defineAsyncApi<GetUserInfoOptions, GetUserInfoSuccess>(
  API_GET_USER_INFO,
  function (args: GetUserInfoOptions, executor: ApiExecutor<GetUserInfoSuccess>) {
    const provider = getUniProvider<UniOAuthProvider>(SERVICE, args.provider ?? PROVIDER)
    if (!provider) {
      executor.reject('Provider not found.')
      return
    }
    provider.getUserInfo({
      success(res) {
        executor.resolve(res)
      },
      fail(err) {
        executor.reject(err.errMsg)
      }
    } as GetUserInfoOptions)
  },
  GetUserInfoApiProtocol
) as GetUserInfo
