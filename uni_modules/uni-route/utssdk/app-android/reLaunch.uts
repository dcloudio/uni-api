import {
    ANIMATION_TYPE,
    APP_LAUNCH,
    RE_LAUNCH,
    changeTabBarIndex,
    getTabBarIndex,
    navigate,
    parseUrl,
    removePages,
    entryPageState,
    reLaunchPagesBeforeEntryPages,
    ReLaunchPage,
} from '@dcloudio/uni-runtime'

import { ReLaunchOptions, ReLaunchSuccess } from '../interface.uts'
import { normalizeRouteOptions } from '../protocols.uts'
import { ReLaunchFailImpl } from '../unierror.uts'

export const reLaunch = defineAsyncApi<ReLaunchOptions, ReLaunchSuccess>(
    RE_LAUNCH,
    (options: ReLaunchOptions, res: ApiExecutor) => {
        if (!entryPageState.handledBeforeEntryPageRoutes) {
            reLaunchPagesBeforeEntryPages.push({ options } as ReLaunchPage)
            return
        }
        const navigationStart = Date.now()
        const normalizeRouteOptionsResult = normalizeRouteOptions(
            APP_LAUNCH,
            options.url as string,
        )
        if (normalizeRouteOptionsResult.errMsg.length > 0) {
            res.reject(new ReLaunchFailImpl(normalizeRouteOptionsResult.errMsg))
            return
        }
        options.url = normalizeRouteOptionsResult.url
        const urlInfo = parseUrl(options.url as string)
        const path = urlInfo.path
        const selected: number = getTabBarIndex(path)
        setTimeout(() => {
            if (selected == -1) {
                navigate(
                    options.url as string,
                    new Map<string, any | null>([[ANIMATION_TYPE, 'none']]),
                    // TODO use 'reLaunch'
                    APP_LAUNCH,
                    () => removePages(0, -1),
                    navigationStart
                )
            } else {
                changeTabBarIndex(selected, path, urlInfo.query, true)
                // TODO use changeTabBarIndex callback
                setTimeout(() => {
                    removePages(0, -1)
                }, 100)
            }
            res.resolve(null)
        }, 0)
    },
)
