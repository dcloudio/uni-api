import { getRealPath } from '@dcloudio/uni-runtime';
import { API_LOAD_FONT_FACE, ApiLoadFontFaceProtocol } from '../protocol.uts';
import { LoadFontFace, LoadFontFaceOptions, LoadFontFaceSuccess } from '../interface.uts';

function getFontSrc(source: string): string {
  if (source.startsWith(`url("`) || source.startsWith(`url('`)) {
    source = getRealPath(source.substring(5, source.length - 2)) as string
  } else if (source.startsWith('url(')) {
    source = getRealPath(source.substring(4, source.length - 1)) as string
  } else {
    source = getRealPath(source) as string
  }
  return source
}

export const loadFontFace: LoadFontFace = defineAsyncApi<LoadFontFaceOptions, LoadFontFaceSuccess>(
  API_LOAD_FONT_FACE,
  (options: LoadFontFaceOptions, exec: ApiExecutor<LoadFontFaceSuccess>) => {
    const src = getFontSrc(options.source)
    const pages = globalThis.getCurrentPages() as UniPageImpl[]
    const page = (pages[pages.length - 1])

    if (!page) {
      exec.reject('page is not ready', { errCode: 99 } as ApiError)
      return
    }

    if (page!.$fontFamilySet.has(options.family)) {
      return
    }

    page!.$fontFamilySet.add(options.family)
    page.getNativePage().loadFontFace({
      family: options.family,
      source: src,
      success: () => {
        exec.resolve()
      },
      fail: (err: ApiError) => {
        exec.reject('', err)
      }
    } as ESObject)
  },
  ApiLoadFontFaceProtocol
) as LoadFontFace
