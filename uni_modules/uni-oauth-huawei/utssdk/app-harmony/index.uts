import { getAbilityContext } from '@dcloudio/uni-runtime';
import { UniOAuthHuaweiProvider } from '../interface.uts';
import { authentication } from '@kit.AccountKit';
import { util } from '@kit.ArkTS';
import { BusinessError } from '@kit.BasicServicesKit';

/* import {
  LoginOptions, LoginSuccess, LoginFail,
  GetUserInfoOptions, GetUserInfoSuccess, GetUserInfoFail,
  UserInfo
} from '../../../uni-oauth/utssdk/interface.uts'; */

export class UniOAuthHuaweiProviderImpl implements UniOAuthHuaweiProvider {
  id: string = "huawei"
  description: string = "华为登录"
  constructor() { }
  login(options: LoginOptions): void {
    let huaweiIdProvider = new authentication.HuaweiIDProvider();
    let loginRequest = huaweiIdProvider.createLoginWithHuaweiIDRequest();
    loginRequest.state = util.generateRandomUUID(); // 应用建议使用generateRandomUUID生成state

    try {
      let controller = new authentication.AuthenticationController(getAbilityContext()!);
      controller.executeRequest(loginRequest, (error: BusinessError<Object>, data) => {
        if (error) {
          options?.fail?.({
            errCode: error.code,
            errMsg: error.message
          } as LoginFail)
          return;
        }
        let loginWithHuaweiIDResponse = data as authentication.LoginWithHuaweiIDResponse;
        let state = loginWithHuaweiIDResponse.state;
        if (state == undefined || loginRequest.state != state) {
          options?.fail?.({
            errCode: 1001502040,
            errMsg: '登录请求可能被跨站攻击'
          } as LoginFail)
          return;
        }
        let loginWithHuaweiIDCredential = loginWithHuaweiIDResponse.data!;
        let code = loginWithHuaweiIDCredential.authorizationCode;
        let idToken = loginWithHuaweiIDCredential.idToken;
        let openID = loginWithHuaweiIDCredential.openID;
        let unionID = loginWithHuaweiIDCredential.unionID;
        options?.success?.(
          {
            errMsg: 'login: ok',
            code,
            authResult: {
              openid: openID,
              idToken,
              unionID
            } as ESObject
          } as LoginSuccess
        )
      });
    } catch (error) {
      options?.fail?.({
        errCode: (error as BusinessError).code,
        errMsg: (error as BusinessError).message
      } as LoginFail)
    }
  }

  getUserInfo(options: GetUserInfoOptions): void {
    // 创建授权请求，并设置参数
    let authRequest = new authentication.HuaweiIDProvider().createAuthorizationWithHuaweiIDRequest();
    authRequest.scopes = ['profile', 'openid']; // 元服务不支持profile，需传其他支持的scope
    authRequest.permissions = ['idtoken'];
    authRequest.state = util.generateRandomUUID();

    // 执行授权请求，并处理结果
    try {
      let controller = new authentication.AuthenticationController(getAbilityContext()!);
      controller.executeRequest(authRequest, (error: BusinessError<Object>, data) => {
        if (error) {
          options?.fail?.({
            errCode: error.code,
            errMsg: error.message
          } as GetUserInfoFail)
          return;
        }
        let authorizationWithHuaweiIDResponse = data as authentication.AuthorizationWithHuaweiIDResponse;
        let state = authorizationWithHuaweiIDResponse.state;
        if (state != undefined && authRequest.state != state) {
          return;
        }
        let authorizationWithHuaweiIDCredential = authorizationWithHuaweiIDResponse.data!;
        let avatarUri = authorizationWithHuaweiIDCredential.avatarUri; // 元服务不支持该字段
        let nickName = authorizationWithHuaweiIDCredential.nickName; // 元服务不支持该字段
        let openId = authorizationWithHuaweiIDCredential.openID;
        options?.success?.({
          errMsg: 'getUserInfo: ok',
          userInfo: {
            nickName,
            avatarUrl: avatarUri,
            openId
          } as UserInfo
        } as GetUserInfoSuccess)
      });
    } catch (error) {
      options?.fail?.({
        errCode: (error as BusinessError).code,
        errMsg: (error as BusinessError).message
      } as GetUserInfoFail)
    }
  }
}
