import { getCurrentPage, isFunction } from '@dcloudio/uni-runtime'
import {
    CreateSelectorQuery,
    NodeField,
    NodeInfo,
    NodesRef,
    SelectorQuery,
    SelectorQueryNodeInfoCallback,
} from '../interface.uts'

// TODO
// const ContextClasss = {
//   canvas: CanvasContext,
//   map: MapContext,
//   video: VideoContext,
//   editor: EditorContext,
// }

type RequestComponentInfoCallback = (result: Array<any>) => void

type SelectorQueryRequest = {
    component: ComponentPublicInstance | null
    selector: string
    single: boolean
    fields: NodeField
}

class NodesRefImpl implements NodesRef {
    private _selectorQuery: SelectorQueryImpl
    private _component: ComponentPublicInstance | null
    private _selector: string
    private _single: boolean
    constructor(
        selectorQuery: SelectorQueryImpl,
        component: ComponentPublicInstance | null,
        selector: string,
        single: boolean,
    ) {
        this._selectorQuery = selectorQuery
        this._component = component
        this._selector = selector
        this._single = single
    }

    // @ts-expect-error
    boundingClientRect(): SelectorQuery {
        // @ts-expect-error
        return this.boundingClientRect(null)
    }

    // @ts-expect-error
    boundingClientRect(
        callback: SelectorQueryNodeInfoCallback | null,
    ): SelectorQuery {
        this._selectorQuery._push(
            this._selector,
            this._component,
            this._single,
            {
                id: true,
                dataset: true,
                rect: true,
                size: true,
            } as NodeField,
            callback,
        )
        return this._selectorQuery
    }

    fields(
        fields: NodeField,
        callback: SelectorQueryNodeInfoCallback | null,
    ): SelectorQuery {
        this._selectorQuery._push(
            this._selector,
            this._component,
            this._single,
            fields,
            callback,
        )
        return this._selectorQuery
    }

    scrollOffset(callback: SelectorQueryNodeInfoCallback): SelectorQuery {
        this._selectorQuery._push(
            this._selector,
            this._component,
            this._single,
            {
                id: true,
                dataset: true,
                scrollOffset: true,
            } as NodeField,
            callback,
        )
        return this._selectorQuery
    }

    context(callback: SelectorQueryNodeInfoCallback): SelectorQuery {
        this._selectorQuery._push(
            this._selector,
            this._component,
            this._single,
            {
                context: true,
            } as NodeField,
            callback,
        )
        return this._selectorQuery
    }

    node(callback: (result: any) => void): SelectorQuery {
        this._selectorQuery._push(
            this._selector,
            this._component,
            this._single,
            {
                node: true,
            } as NodeField,
            callback,
        )
        return this._selectorQuery
    }
}

class SelectorQueryImpl implements SelectorQuery {
    private _queue: Array<SelectorQueryRequest>
    private _component: ComponentPublicInstance | null = null
    private _queueCb: Array<SelectorQueryNodeInfoCallback | null>
    private _nodesRef!: NodesRef
    constructor(component: ComponentPublicInstance) {
        this._component = component
        this._queue = []
        this._queueCb = []
    }

    // @ts-expect-error
    exec(): NodesRef | null {
        this._component?.$?.$waitNativeRender(() => {
            requestComponentInfo(
                this._component,
                this._queue,
                (res: Array<any>) => {
                    const queueCbs = this._queueCb
                    res.forEach((info: any, _index) => {
                        const queueCb = queueCbs[_index]
                        if (isFunction(queueCb)) {
                            queueCb!(info)
                        }
                    })
                },
            )
        })
        // TODO
        return this._nodesRef
    }
    // @ts-expect-error
    exec(callback: (result: Array<any>) => void | null): NodesRef | null {
        this._component?.$?.$waitNativeRender(() => {
            requestComponentInfo(
                this._component,
                this._queue,
                (res: Array<any>) => {
                    const queueCbs = this._queueCb
                    res.forEach((info: any, _index) => {
                        const queueCb = queueCbs[_index]
                        if (isFunction(queueCb)) {
                            queueCb!(info)
                        }
                    })
                    if (isFunction(callback)) {
                        callback(res)
                    }
                },
            )
        })
        // TODO
        return this._nodesRef
    }

    in(component: any | null): SelectorQuery {
        // @ts-expect-error
        if (component instanceof ComponentPublicInstance) {
            this._component = component as ComponentPublicInstance
        }
        return this
    }

    select(selector: string): NodesRef {
        this._nodesRef = new NodesRefImpl(this, this._component, selector, true)
        return this._nodesRef
    }

    selectAll(selector: string): NodesRef {
        this._nodesRef = new NodesRefImpl(
            this,
            this._component,
            selector,
            false,
        )
        return this._nodesRef
    }

    selectViewport(): NodesRef {
        this._nodesRef = new NodesRefImpl(this, null, '', true)
        return this._nodesRef
    }

    _push(
        selector: string,
        component: ComponentPublicInstance | null,
        single: boolean,
        fields: NodeField,
        callback: SelectorQueryNodeInfoCallback | null,
    ) {
        this._queue.push({
            component,
            selector,
            single,
            fields,
        } as SelectorQueryRequest)
        this._queueCb.push(callback)
    }
}

class QuerySelectorHelper {
    _element: Element
    _fields: NodeField

    constructor(element: Element, fields: NodeField) {
        this._element = element
        this._fields = fields
    }

    static queryElement(
        element: Element,
        selector: string,
        all: boolean,
        fields: NodeField,
    ): any | null {
        return new QuerySelectorHelper(element, fields).query(selector, all)
    }

    query(selector: string, all: boolean): any | null {
        if (this._element.nodeName == '#comment') {
            return this.queryFragment(this._element, selector, all)
        } else {
            return all
                ? this.querySelectorAll(this._element, selector)
                : this.querySelector(this._element, selector)
        }
    }

    queryFragment(el: Element, selector: string, all: boolean): any | null {
        const startNodeId = parseInt(el.getNodeId())
        const endNodeId = (startNodeId + 1).toString()
        let current = el.nextSibling
        if (current == null) {
            return null
        }

        if (all) {
            const result1: Array<any> = []
            while (true) {
                const queryResult = this.querySelectorAll(current!, selector)
                if (queryResult != null) {
                    result1.push(...queryResult)
                }
                current = current.nextSibling
                if (current == null || current.getNodeId() == endNodeId) {
                    break
                }
            }
            return result1
        } else {
            let result2: any | null = null
            while (true) {
                result2 = this.querySelector(current!, selector)
                current = current.nextSibling
                if (
                    result2 != null ||
                    current == null ||
                    current.getNodeId() == endNodeId
                ) {
                    break
                }
            }
            return result2
        }
    }

    querySelector(element: Element, selector: string): NodeInfo | null {
        let element2 = this.querySelf(element, selector)
        if (element2 == null) {
            element2 = element.querySelector(selector)
        }
        if (element2 != null) {
            return this.getNodeInfo(element2)
        }
        return null
    }

    querySelectorAll(
        element: Element,
        selector: string,
    ): Array<NodeInfo> | null {
        const nodesInfoArray: Array<NodeInfo> = []
        const element2 = this.querySelf(element, selector)
        if (element2 != null) {
            nodesInfoArray.push(this.getNodeInfo(element))
        }
        const findNodes = element.querySelectorAll(selector)
        findNodes?.forEach((el: Element) => {
            nodesInfoArray.push(this.getNodeInfo(el))
        })
        return nodesInfoArray
    }

    querySelf(element: Element | null, selector: string): Element | null {
        if (element == null || selector.length < 2) {
            return null
        }

        const selectorType = selector.charAt(0)
        const selectorName = selector.slice(1)
        if (selectorType == '.' && element.classList.includes(selectorName)) {
            return element
        }
        if (selectorType == '#' && element.getAttribute('id') == selectorName) {
            return element
        }
        if (selector.toUpperCase() == element.nodeName.toUpperCase()) {
            return element
        }

        return null
    }

    getNodeInfo(element: Element): NodeInfo {
        if (this._fields.node == true) {
            const nodeInfo = {
                node: element
            } as NodeInfo
            if (this._fields.size == true) {
                const rect = element.getBoundingClientRect()
                nodeInfo.width = rect.width
                nodeInfo.height = rect.height
            }
            return nodeInfo
        }
        const rect = element.getBoundingClientRect()
        const nodeInfo = {
            id: element.getAttribute('id')?.toString(),
            dataset: null,
            left: rect.left,
            top: rect.top,
            right: rect.right,
            bottom: rect.bottom,
            width: rect.width,
            height: rect.height,
        } as NodeInfo
        return nodeInfo
    }
}

function requestComponentInfo(
    vueComponent: ComponentPublicInstance | null,
    queue: Array<SelectorQueryRequest>,
    callback: RequestComponentInfoCallback,
) {
    const result: Array<any> = []
    const el = vueComponent?.$el
    if (el != null) {
        queue.forEach((item: SelectorQueryRequest) => {
            const queryResult = QuerySelectorHelper.queryElement(
                el,
                item.selector,
                !item.single,
                item.fields,
            )
            if (queryResult != null) {
                result.push(queryResult)
            }
        })
    }
    callback(result)
}

export const createSelectorQuery: CreateSelectorQuery =
    function (): SelectorQuery {
        return new SelectorQueryImpl(getCurrentPage()!)
    }
